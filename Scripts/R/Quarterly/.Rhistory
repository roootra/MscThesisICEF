irfs[(1 + nvars*(period-1)):(nvars*period), 1:nvars] %*% Q
}
#check for signs
print(irfs_transformed)
print(irfs_transformed)
fail = any(S * irfs_transformed < 0)
if(!fail){
satisfying_models[[length(satisfying_models) + 1]] =
list("Q" = Q, "Transformed_irfs" = irfs_transformed)
}
}
return(satisfying_models)
}
sign_restr_ala_arias(irfs=test_arias_irfs, sign_matrix = signs_test[,,1])
for(draw in 1:dim(irfs)[4]){
P <- t(matrix(choldecs[,draw], ncol=5)) #lower Cholesky dec. of vcov mat from draw
for(try in 1:tries){
cat("Draw ", draw, ", try ", try, ". Accepted: ", succ,".\033[K\r", sep="")
new_candidate <- matrix(rnorm(nvars^2), nrow=nvars)
Q <- qr.Q(qr(new_candidate, complete=T)) #random orthogonal matrix from N(0,1)
for(current_t in 1:horizon){
#for(colperm in permn(1:NCOL(Q))){
irfs_transformed <- irfs[,,current_t,draw] %*% P %*% Q[,colperm]
#print(diag(irfs_transformed))
signs_check <- irfs_transformed * signs_lower[,,current_t]
fail <- sum(na.fill(signs_check,0) < 0) #check whether restrictions are held
if(fail == 0){
succ = succ + 1
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["Q"]] <- Q
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["P"]] <- P
}
#}
}
}
}
#Sign check
sign_models <- list()
tries <- 200
succ <- 0
for(draw in 1:dim(irfs)[4]){
P <- t(matrix(choldecs[,draw], ncol=5)) #lower Cholesky dec. of vcov mat from draw
for(try in 1:tries){
cat("Draw ", draw, ", try ", try, ". Accepted: ", succ,".\033[K\r", sep="")
new_candidate <- matrix(rnorm(nvars^2), nrow=nvars)
Q <- qr.Q(qr(new_candidate, complete=T)) #random orthogonal matrix from N(0,1)
for(current_t in 1:horizon){
#for(colperm in permn(1:NCOL(Q))){
irfs_transformed <- irfs[,,current_t,draw] %*% P %*% Q#[,colperm]
#print(diag(irfs_transformed))
signs_check <- irfs_transformed * signs_lower[,,current_t]
fail <- sum(na.fill(signs_check,0) < 0) #check whether restrictions are held
if(fail == 0){
succ = succ + 1
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["Q"]] <- Q
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["P"]] <- P
}
#}
}
}
}
for(draw in 1:dim(irfs)[4]){
P <- t(matrix(choldecs[,draw], ncol=5)) #lower Cholesky dec. of vcov mat from draw
for(try in 1:tries){
cat("Draw ", draw, ", try ", try, ". Accepted: ", succ,".\033[K\r", sep="")
new_candidate <- matrix(rnorm(nvars^2), nrow=nvars)
Q <- qr.Q(qr(new_candidate, complete=T)) #random orthogonal matrix from N(0,1)
for(current_t in 1:horizon){
#for(colperm in permn(1:NCOL(Q))){
irfs_transformed <- irfs[,,current_t,draw] %*% P %*% Q#[,colperm]
#print(diag(irfs_transformed))
print(irfs_transformed)
signs_check <- irfs_transformed * signs_lower[,,current_t]
fail <- sum(na.fill(signs_check,0) < 0) #check whether restrictions are held
if(fail == 0){
succ = succ + 1
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["Q"]] <- Q
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["P"]] <- P
}
#}
}
}
}
for(draw in 1:dim(irfs)[4]){
P <- t(matrix(choldecs[,draw], ncol=5)) #lower Cholesky dec. of vcov mat from draw
for(try in 1:tries){
cat("Draw ", draw, ", try ", try, ". Accepted: ", succ,".\033[K\r", sep="")
new_candidate <- matrix(rnorm(nvars^2), nrow=nvars)
Q <- qr.Q(qr(new_candidate, complete=T)) #random orthogonal matrix from N(0,1)
for(current_t in 1:horizon){
#for(colperm in permn(1:NCOL(Q))){
irfs_transformed <- irfs[,,current_t,draw] %*% P %*% Q#[,colperm]
#print(diag(irfs_transformed))
print(irfs[,,current_t,draw] %*% P)
signs_check <- irfs_transformed * signs_lower[,,current_t]
fail <- sum(na.fill(signs_check,0) < 0) #check whether restrictions are held
if(fail == 0){
succ = succ + 1
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["Q"]] <- Q
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["P"]] <- P
}
#}
}
}
}
for(draw in 1:dim(irfs)[4]){
P <- t(matrix(choldecs[,draw], ncol=5)) #lower Cholesky dec. of vcov mat from draw
for(try in 1:tries){
cat("Draw ", draw, ", try ", try, ". Accepted: ", succ,".\033[K\r", sep="")
new_candidate <- matrix(rnorm(nvars^2), nrow=nvars)
Q <- qr.Q(qr(new_candidate, complete=T)) #random orthogonal matrix from N(0,1)
for(current_t in 1:horizon){
#for(colperm in permn(1:NCOL(Q))){
irfs_transformed <- irfs[,,current_t,draw] %*% P %*% Q#[,colperm]
#print(diag(irfs_transformed))
signs_check <- irfs_transformed * signs_lower[,,current_t]
fail <- sum(na.fill(signs_check,0) < 0) #check whether restrictions are held
if(fail == 0){
succ = succ + 1
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["Q"]] <- Q
sign_models[[paste0("Draw ",as.character(draw))]][[paste0("Try ",
as.character(try))]][["P"]] <- P
}
#}
}
}
}
bayesian_model <- bvar(data_to_model, lags=1,
priors = bv_priors(),
mh = bv_mh(),
n_thin=10, n_burn=95000, n_draw=100000)
sign_restr_ala_arias(irfs=test_arias_irfs, sign_matrix = signs_test[,,1], tries = 1000)
sign_restr_ala_arias <- function(irfs, sign_matrix, tries=300){
nvars = NCOL(irfs)
periods = NROW(irfs) / nvars
S = na.fill(sign_matrix, 0)
satisfying_models = list()
for(try in 1:tries){
#cat("Try ", try, ", successes: ", length(satisfying_models), "\r", sep="")
X = matrix(rnorm(nvars^2), nrow=nvars)
Q = qr.Q(qr(X))
#each irf in period h (column-stacked) should be transformed
irfs_transformed = matrix(nrow=nvars*periods, ncol=nvars)
for(period in 1:periods){
irfs_transformed[(1 + nvars*(period-1)):(nvars*period), 1:nvars] =
irfs[(1 + nvars*(period-1)):(nvars*period), 1:nvars] %*% Q
}
#check for signs
fail = any(S * irfs_transformed < 0)
if(!fail){
satisfying_models[[length(satisfying_models) + 1]] =
list("Q" = Q, "Transformed_irfs" = irfs_transformed)
}
}
return(satisfying_models)
}
sign_restr_ala_arias(irfs=test_arias_irfs, sign_matrix = signs_test[,,1], tries = 10000)
sign_restr_ala_arias(irfs=test_arias_irfs, sign_matrix = diag(nrow=5,ncol=5), tries = 10000)
signs[,,1]
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=10000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ".", sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs)
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=1000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ".", sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs)
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=500)
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=1000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ". Accepted: ", length(satisfying_models) ,"." sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=500)
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=1000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ". Accepted: ", length(satisfying_models) ,"." sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=1000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ". Accepted: ", length(satisfying_models), ".", sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=500)
test_arias_irfs
any(signs[,,1] * test_arias_irfs < 0)
any(signs[,,1] * test_arias_irfs <= 0)
any(signs[,,1] * test_arias_irfs > 0)
any(signs[,,1] * test_arias_irfs < 0)
any(diag(nrow=5, ncol=5) * test_arias_irfs < 0)
any(diag(nrow=5, ncol=5) * test_arias_irfs <= 0)
irf_ala_arias <- function(B, Sigma, p, n, horizon, LR=T){
#B = A+ %*% A0^(-1) --- matrix of reduced parameters
#in form B = [c, B1, ..., Bp]
#Sigma = covariance matrix of error term
#p = order of model
#n = number of variables
#horizon = number of periods to calculate IRF for
#LR = boolean variable, whether to calculate long-run IRF
A0_inv = chol(Sigma)
A0 = solve(A0_inv)
A_plus = B %*% A0
#Finite-run IRFs
F_mat = matrix(data=0, nrow = p*n, ncol = p*n)
F_mat[,1:n] = t(B[-1,])
if(p > 1){
F_mat[1:((p-1)*n), (n+1):NCOL(F_mat)] = diag(nrow=(p-1)*n, ncol = (p-1)*n)
}
J_mat = matrix(data=0, nrow=p*n, ncol=n)
J_mat[1:n, 1:n] = diag(nrow=n, ncol=n)
irfs = matrix(nrow=(horizon+1)*n, ncol=n)
for(time in 0:horizon){
irfs[(1 + n*(time)):(n*(time+1)),] =
t(A0_inv) %*% t(J_mat) %*% (F_mat %^%(time)) %*% J_mat
#delete A0_inv to get usual Phi
#otherwise, get already Cholesky ortho IRFs
}
if(LR){
A_sum = 0
for(lag in 1:p){
A_sum = A_sum + t(A_plus)[1:n, ((2 + n*(lag-1)):(1 + n*lag))]
}
irfs_lr <- solve(t(A0) - A_sum)
irfs <- rbind(irfs, irfs_lr)
}
return(irfs)
}
sign_restr_ala_arias <- function(irfs, sign_matrix, tries=300){
nvars = NCOL(irfs)
periods = NROW(irfs) / nvars
S = na.fill(sign_matrix, 0)
satisfying_models = list()
for(try in 1:tries){
#cat("Try ", try, ", successes: ", length(satisfying_models), "\r", sep="")
X = matrix(rnorm(nvars^2), nrow=nvars)
Q = qr.Q(qr(X))
#each irf in period h (column-stacked) should be transformed
irfs_transformed = matrix(nrow=nvars*periods, ncol=nvars)
for(period in 1:periods){
irfs_transformed[(1 + nvars*(period-1)):(nvars*period), 1:nvars] =
irfs[(1 + nvars*(period-1)):(nvars*period), 1:nvars] %*% Q
}
#check for signs
fail = any(S * irfs_transformed < 0)
if(!fail){
satisfying_models[[length(satisfying_models) + 1]] =
list("Q" = Q, "Transformed_irfs" = irfs_transformed)
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=500)
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=diag(nrow=1, ncol=1),
tries=500)
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=diag(nrow=5, ncol=5),
tries=500)
diag(nrow=5, ncol=5)
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=1000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
sr_sign_matrix_stacked = diag(nrow=5, ncol=5)
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ". Accepted: ", length(satisfying_models), ".", sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=500)
bayesian_sign_restr_arias <- function(B, Sigma, p, n, draws, sr_sign_matrix,
lr_sign_matrix=NULL, has_const=TRUE, tries=1000){
sr_sign_matrix_stacked = matrix(aperm(sr_sign_matrix,
c(2,3,1)),
nrow=dim(sr_sign_matrix)[1] * dim(sr_sign_matrix)[3],
ncol=dim(sr_sign_matrix)[1])
sr_sign_matrix_stacked = diag(nrow=5, ncol=5)
cat("\n")
satisfying_models = list()
for(draw in 1:draws){
cat("\rDraw ", draw, ". Accepted: ", length(satisfying_models), ".", sep="")
bayesian_ortho_irfs = irf_ala_arias(B=B[draw,,], Sigma=Sigma[draw,,],
p=p, n=n, horizon=(dim(sr_sign_matrix)[3]-1), LR=FALSE)
succ_models_from_draw = sign_restr_ala_arias(irfs=bayesian_ortho_irfs,
sign_matrix = sr_sign_matrix_stacked, tries = tries)
if(length(succ_models_from_draw) != 0){
satisfying_models[[length(satisfying_models) + 1]] = succ_models_from_draw
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=10000)
irf_ala_arias <- function(B, Sigma, p, n, horizon, LR=T){
#B = A+ %*% A0^(-1) --- matrix of reduced parameters
#in form B = [c, B1, ..., Bp]
#Sigma = covariance matrix of error term
#p = order of model
#n = number of variables
#horizon = number of periods to calculate IRF for
#LR = boolean variable, whether to calculate long-run IRF
A0_inv = chol(Sigma)
A0 = solve(A0_inv)
A_plus = B %*% A0
#Finite-run IRFs
F_mat = matrix(data=0, nrow = p*n, ncol = p*n)
F_mat[,1:n] = t(B[-1,])
if(p > 1){
F_mat[1:((p-1)*n), (n+1):NCOL(F_mat)] = diag(nrow=(p-1)*n, ncol = (p-1)*n)
}
J_mat = matrix(data=0, nrow=p*n, ncol=n)
J_mat[1:n, 1:n] = diag(nrow=n, ncol=n)
irfs = matrix(nrow=(horizon+1)*n, ncol=n)
for(time in 0:horizon){
irfs[(1 + n*(time)):(n*(time+1)),] =
A0 %*% t(J_mat) %*% (F_mat %^%(time)) %*% J_mat
#delete A0_inv to get usual Phi
#otherwise, get already Cholesky ortho IRFs
}
if(LR){
A_sum = 0
for(lag in 1:p){
A_sum = A_sum + t(A_plus)[1:n, ((2 + n*(lag-1)):(1 + n*lag))]
}
irfs_lr <- solve(t(A0) - A_sum)
irfs <- rbind(irfs, irfs_lr)
}
return(irfs)
}
sign_restr_ala_arias <- function(irfs, sign_matrix, tries=300){
nvars = NCOL(irfs)
periods = NROW(irfs) / nvars
S = na.fill(sign_matrix, 0)
satisfying_models = list()
for(try in 1:tries){
#cat("Try ", try, ", successes: ", length(satisfying_models), "\r", sep="")
X = matrix(rnorm(nvars^2), nrow=nvars)
Q = qr.Q(qr(X))
#each irf in period h (column-stacked) should be transformed
irfs_transformed = matrix(nrow=nvars*periods, ncol=nvars)
for(period in 1:periods){
irfs_transformed[(1 + nvars*(period-1)):(nvars*period), 1:nvars] =
irfs[(1 + nvars*(period-1)):(nvars*period), 1:nvars] %*% Q
}
#check for signs
fail = any(S * irfs_transformed < 0)
if(!fail){
satisfying_models[[length(satisfying_models) + 1]] =
list("Q" = Q, "Transformed_irfs" = irfs_transformed)
}
}
return(satisfying_models)
}
bayesian_sign_restr_arias(B=bayesian_model$beta,
Sigma=bayesian_model$sigma,
p=bayesian_model$meta$lags,
n=bayesian_model$meta$M,
draws=bayesian_model$meta$n_save,
sr_sign_matrix=signs,
tries=1000)
